name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  quality:
    name: Quality Gates
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install quality toolchain
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Run quality checks
        run: make lint

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quality
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Create kind cluster
        uses: helm/kind-action@v1.8.0
        with:
          cluster_name: nextflow-ci
      - name: Run tests
        env:
          PYTEST_ADDOPTS: --color=yes
        run: |
          pytest -v --cov=nextflow_k8s_service --cov-report=xml --cov-report=term --cov-fail-under=80
      - name: Upload coverage report
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          fail_ci_if_error: false

  build:
    name: Build and Publish Image
    needs: [quality, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      REGISTRY: ${{ secrets.REGISTRY != '' && secrets.REGISTRY || format('ghcr.io/{0}', github.repository_owner) }}
      IMAGE_NAME: nextflow-api
    outputs:
      version: ${{ steps.version.outputs.version }}
      image_digest: ${{ steps.docker_build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4
      - name: Extract project version
        id: version
        shell: bash
        run: |
          version=$(python - <<'PY'
import pathlib, tomllib

data = tomllib.loads(pathlib.Path("pyproject.toml").read_text())
print(data["project"]["version"])
PY
          )
          echo "version=$version" >> "$GITHUB_OUTPUT"
      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME != '' && secrets.REGISTRY_USERNAME || github.actor }}
          password: ${{ secrets.REGISTRY_PASSWORD != '' && secrets.REGISTRY_PASSWORD || secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/nextflow-api:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/nextflow-api:${{ github.sha }}
            ${{ env.REGISTRY }}/nextflow-api:latest
      - name: Generate SBOM
        uses: anchore/syft-action@v0.17.0
        with:
          image: ${{ env.REGISTRY }}/nextflow-api:${{ github.sha }}
          output-file: sbom.spdx.json
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/nextflow-api:${{ github.sha }}
          format: table
          severity: CRITICAL,HIGH

  kubernetes-validation:
    name: Kubernetes Validation
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && secrets.KUBECONFIG_FILE != ''
    env:
      DEPLOY_NAMESPACE: ${{ secrets.K8S_NAMESPACE }}
      PIPELINE_PVC_NAME: ${{ secrets.PIPELINE_PVC_NAME }}
    steps:
      - uses: actions/checkout@v4
      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: v1.30.0
      - name: Install kubeconform
        run: |
          mkdir -p "$HOME/.local/bin"
          curl -L https://github.com/yannh/kubeconform/releases/download/v0.6.5/kubeconform-linux-amd64.tar.gz | \
            tar -C "$HOME/.local/bin" -xz kubeconform
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
      - name: Configure kubeconfig
        env:
          KUBECONFIG_FILE: ${{ secrets.KUBECONFIG_FILE }}
        run: |
          mkdir -p "$HOME/.kube"
          echo "$KUBECONFIG_FILE" | base64 --decode > "$HOME/.kube/config"
      - name: Validate manifests schema
        run: |
          kubeconform -summary -strict nextflow_k8s_service/k8s-manifests/*.yaml
      - name: Server-side dry run
        run: |
          kubectl apply --namespace "${DEPLOY_NAMESPACE:-nextflow}" --dry-run=server -f nextflow_k8s_service/k8s-manifests/
      - name: Validate RBAC permissions
        run: |
          kubectl auth can-i create jobs \
            --namespace "${DEPLOY_NAMESPACE:-nextflow}" \
            --as=system:serviceaccount:${DEPLOY_NAMESPACE:-nextflow}:nextflow-k8s-service
      - name: Validate ConfigMap and PVC
        run: |
          NAMESPACE="${DEPLOY_NAMESPACE:-nextflow}"
          kubectl get configmap nextflow-k8s-service-config -n "$NAMESPACE"
          if [ -n "$PIPELINE_PVC_NAME" ]; then
            kubectl get pvc "$PIPELINE_PVC_NAME" -n "$NAMESPACE" -o jsonpath='{.status.phase} {.spec.accessModes[*]}'
            echo
          else
            echo "PIPELINE_PVC_NAME not set; skipping PVC verification"
          fi

  deploy:
    name: Deploy to Cluster
    needs: [build, kubernetes-validation]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    env:
      DEPLOY_NAMESPACE: ${{ secrets.K8S_NAMESPACE }}
      REGISTRY: ${{ secrets.REGISTRY != '' && secrets.REGISTRY || format('ghcr.io/{0}', github.repository_owner) }}
      IMAGE_NAME: nextflow-api
    steps:
      - uses: actions/checkout@v4
      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: v1.30.0
      - name: Configure kubeconfig
        env:
          KUBECONFIG_FILE: ${{ secrets.KUBECONFIG_FILE }}
        run: |
          mkdir -p "$HOME/.kube"
          echo "$KUBECONFIG_FILE" | base64 --decode > "$HOME/.kube/config"
      - name: Update deployment image
        run: |
          NAMESPACE="${DEPLOY_NAMESPACE:-nextflow}"
          IMAGE_TAG="${{ needs.build.outputs.version }}"
          kubectl set image deployment/nextflow-k8s-service nextflow-api=${REGISTRY}/nextflow-api:${IMAGE_TAG} -n "$NAMESPACE"
          kubectl rollout status deployment/nextflow-k8s-service -n "$NAMESPACE" --timeout=120s

  smoke:
    name: Smoke Tests
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && secrets.SMOKE_TEST_API_URL != ''
    env:
      SMOKE_TEST_API_URL: ${{ secrets.SMOKE_TEST_API_URL }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Run smoke tests
        run: pytest tests/smoke -v -m smoke
