name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'
          allow-prerelease: true

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Install dependencies
        run: uv sync --group dev --group release

      - name: Run tests
        run: uv run pytest

      - name: Semantic Release
        id: semantic_release
        uses: python-semantic-release/python-semantic-release@v10
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate OpenAPI spec
        if: steps.semantic_release.outputs.released == 'true'
        run: uv run python scripts/generate_openapi.py

      - name: Commit OpenAPI spec
        if: steps.semantic_release.outputs.released == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add openapi.json
          git commit -m "chore: update OpenAPI spec for v${{ steps.semantic_release.outputs.version }}"
          git push

      - name: Log in to GHCR
        if: steps.semantic_release.outputs.released == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image name
        if: steps.semantic_release.outputs.released == 'true'
        id: image
        run: |
          echo "name=ghcr.io/${GITHUB_REPOSITORY,,}" >> "$GITHUB_OUTPUT"

      - name: Build and push container image
        if: steps.semantic_release.outputs.released == 'true'
        env:
          IMAGE_NAME: ${{ steps.image.outputs.name }}
          VERSION: ${{ steps.semantic_release.outputs.version }}
        run: |
          docker build -t "$IMAGE_NAME:$VERSION" .
          docker tag "$IMAGE_NAME:$VERSION" "$IMAGE_NAME:latest"
          docker push "$IMAGE_NAME:$VERSION"
          docker push "$IMAGE_NAME:latest"
